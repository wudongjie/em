devtools::test(filter="em")
install.packages("fitdistrplus")
devtools::test(filter="em")
?binomial
?rank
devtools::test(filter="em")
?family
?substitute
?make.link()
?gnmterm
?gnm::gnmterm
?gnm::gnmTerms
update.packages("gnm")
package_version("gnm")
package_version(gnm)
devtools::test(filter="em")
model.frame(object$formula)
model.frame(object$formula, object$data)
formula
object$formula''
object$formula
devtools::test(filter="em")
model.frame(object$formula, object$data)
model.frame(gnmTerms(object$formula), object$data)
gnm::gnmTerms(object$formula)
model.response(object$model)
str(object$model)
devtools::test(filter="em")
devtools::test(filter="em")
udf2_3
summary(udf2_3)
?gnm.update
gnm.update
gnm::gnm.update
update.formula
update.default
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
call
args1
terms(object)
terms(object$models)
terms(object$models[[1]])
object$call$pars
devtools::test(filter="em")
match.call(expand.dots = FALSE)
match.call()
devtools::test(filter="em")
devtools::test(filter="em")
upf2_2
udf2_2
devtools::test(filter="em")
summary(udf2_2)
summary(udf2_1)
summary(udf2_2)
summary(udf2_3)
summary(udf2_4)
summary(udf1)
summary(udf2_4)
devtools::test(filter="em")
devtools::test(filter="em")
y
dbinom(y[,1], size=rowSums(y), prob=object$fitted.values)
dbinom(y, size=y, prob=object$fitted.values)
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
flexmix::flexmix(formula, data, k=2, model=FLXMRglm(family="binomial"))
flexmix::flexmix(formula, data, k=2, model=flexmix::FLXMRglm(family="binomial"))
flexmix::flexmix(formula, data, k=2, model=flexmix::FLXMRglm(formula=formula, family="binomial"))
flexmix::flexmix(formula, NPreg, k=2, model=flexmix::FLXMRglm(family="binomial"))
NPreg$ynb <- 1 - NPreg$yb
formula2 <- yb + ynb ~x+x2
flexmix::flexmix(formula2, NPreg, k=2, model=flexmix::FLXMRglm(family="binomial"))
formula2 <-  cbind(yb, 1-yb) ~x+x2
flexmix::flexmix(formula2, NPreg, k=2, model=flexmix::FLXMRglm(family="binomial"))
summary(flexmix::flexmix(formula2, NPreg, k=2, model=flexmix::FLXMRglm(family="binomial")))
print(summary(flexmix::flexmix(formula2, NPreg, k=2, model=flexmix::FLXMRglm(family="binomial"))))
fr1 <- flexmix::flexmix(formula2, NPreg, k=2, model=flexmix::FLXMRglm(family="binomial"))
summary(fr1)
refit(fr1)
flexmix::refit(fr1)
summary(fr1)
str(fr1)
?dbinom
?dbinom
devtools::test(filter="em")
object$family
object$family$linkfun()
object$family$linkfun
object$family$linkfun(den)
object$family$linkfun(1)
object$family$linkfun(0)
object$family$linkfun(1, log=T)
object$family$linkfun(1)
?dbinom
update.formula
?model.matrix
nrow(c(1,2))
?nnet::nnet
"formula" %in% c("formula", "else")
?nnet.default
devtools::test(filter="em")
devtools::test(filter="em")
fit_lm$model
devtools::test(filter="em")
devtools::test(filter="em")
model.matrix(formula., data)
devtools::test(filter="em")
model.matrix(formula, data)
model.matrix.default()
devtools::test(filter="em")
model.matrix(formula, data)
model.matrix.default()
devtools::test(filter="em")
nnet.default(x, y)
nnet(x, y)
nnet::nnet(x, y)
devtools::load_all()
devtools::test(filter="em")
nnet()
usethis::use_package("nnet")
devtools::test(filter="em")
nnet()
devtools::test(filter="em")
devtools::test(filter="em")
nnet::nnet(x, y size=0)
nnet::nnet(x, y size=0)
nnet::nnet(x,y, size=0=
nnet::nnet(x,y, size=0)
devtools::test(filter="em")
nnet::nnet.default(x, y, w, size=0)
nnet::nnet.default(x, y, w=w, size=0)
devtools::test(filter="em")
mask
r
p
nnet::nnet.default(x, y, w, mask = mask, size = 0,
skip = TRUE, softmax = TRUE, censored = FALSE,
rang = 0, trace=FALSE,...)
nnet::nnet.default(x, y, w, mask = mask, size = 0,
skip = TRUE, softmax = TRUE, censored = FALSE,
rang = 0, trace=FALSE)
kk <- nnet::nnet.default(x, y, w, mask = mask, size = 0,
skip = TRUE, softmax = TRUE, censored = FALSE,
rang = 0, trace=FALSE)
kk$fitted.values
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
object$concomitant
devtools::test(filter="em")
devtools::test(filter="em")
str(summary$results.con)
str(summary(results.con))
coef(results.con)
str(results.con)
devtools::test(filter="em")
mstep.concomitant.refit(concomitant, modelData, post_pr)
devtools::test(filter="em")
mstep.concomitant.refit(concomitant, modelData, post_pr)
devtools::test(filter="em")
mstep.concomitant.refit(concomitant, modelData, post_pr)
summary(mstep.concomitant.refit(concomitant, modelData, post_pr))
devtools::test(filter="em")
x$summary.concomitant
str(x$summary.concomitant)
?printCoefmat
devtools::test(filter="em")
coefs
coefs
str(coefs)
str(x$summary.concomitant)
nobs(x$summary.concomitant)
devtools::test(filter="em")
flatten(x$summary.concomitant$coefficients)
devtools::test(filter="em")
flatten(x$summary.concomitant$coefficients)
flatten(x$summary.concomitant$coefficients, by="row")
str(x$summary.concomitant$coefficients)
usethis::use_test("utils")
devtools::test(filter="utils")
devtools::test(filter="utils")
devtools::test(filter="utils")
flatten(coefMatrix, by="row")
devtools::test(filter="utils")
devtools::test(filter="utils")
devtools::test(filter="utils")
devtools::test(filter="em")
names(mf)
mf
mf
eval(mf)
eval(mf, parent.frame())
mf
mt
str(mt)
mf
?match.call
par
pars
devtools::test(filter="em")
pars
pars
str(pars)
match.call(envir=pars)
match.call(envir=listenv(pars))
match.call(envir=new.env(pars))
eval(pars)
match.call(get, call("get", args))
devtools::test(filter="em")
...
list(...)
do.call(...)
do.call(list(...))
?do.call
as.list(substitute(list(...)))[-1L]
devtools::test(filter="em")
mf
devtools::test(filter="em")
devtools::test(filter="em")
mf
mf
devtools::test(filter="em")
args
post_pr
mstep(models, args, post_pr=post_pr)
mstep(models, ..., post_pr=post_pr)
mstep(models, list(...), post_pr=post_pr)
devtools::test(filter="em")
args
str(args
)
)
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
ncol(object)
data
post_pr
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
mf.con
devtools::test(filter="em")
names(mf.con[[2L]])
names(mf.con[[2]])
mf.con[[2]]
mf.con[2]
mf.con
str(mf.con)
str(mf.con[[1]])
str(mf.con[[2]])
str(mf.con[1])
mf.con$concomitant
mf.con$formula <- mf.con$concomitant
mf.con
class(mf.con)
?substitute
substitute(mf.con$concomitant, mf.con$formula)
mf.con[[2L]]
str(mf.con[[2L]])
str(mf.con)
mf.con[1]
mf.con[1L]
mf.con[2L]
str(mf.con)
attr(mf.con)
list(mf.con)
deparse(mf.con)
deparse(mf.con[[2]])
substitute(mf.con, list(formula_c=formula))
substitute(eval(mf.con), list(formula_c=formula))
substitute(quote(mf.con), list(formula_c=formula))
mt.con <- attr(mf.con, "terms")
mt.con
mf.con
do.call("substitute", mf.con, list(concomitant=formula))
do.call("substitute", list(mf.con, list(concomitant=formula)))
do.call("substitute", list(mf.con[[1]], list(concomitant=formula)))
do.call("substitute", list(mf.con[1], list(concomiant=formula)))
do.call("substitute", list(mf.con, list(formula_c=formula)))
mf.con
do.call("substitute", list(mf.con, list(concomitant=formula)))
call
mf.con[[2]][1]
mf.con[[2]][[1]]
mf.con[2][[1]]
?match.call
formals(mf.con)
args(mf.con)
names(mf.con)
devtools::test(filter="em")
names(mf.con)[names(mf.con) == "concomitant"] <- "formula"
mf.con
mf.con
model.matrix(formula, data)
results.con
devtools::test(filter="em")
coef.con
x$summary.concomitant$fitted.values
length(x$summary.concomitant$fitted.values)
x$summary.concomitant$rank
x$summary.concomitant$coefficients
class(x$summary.concomitant$coefficients)
devtools::test(filter="em")
devtools::test(filter="em")
na
coef.con
c.names
x$coefficients
x$summary.concomitant
devtools::test(filter="em")
coef.con
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
print(fmm_fit)
devtools::test(filter="em")
summary(fmm_fit)
fmm_fit_post
str(fmm_fit_post)
devtools::test(filter="em")
n
devtools::test(filter="em")
devtools::test(filter="em")
gnm::gnmTerms
devtools::test(filter="em")
gnm::getModelFrame()
gnm::getModelFrame(model, formula)
?gnm::getModelFrame
?Nonlin
gnm::getData
gnm::getModelFrame()
devtools::test(filter="em")
devtools::test(filter="em")
mf[[1L]] <- quote(model.frame)
mf
model.frame.gnm
install.packages("gnm")
install.packages("gnm")
gnm::model.frame
model.frame.gnm(formula, data)
install.packages("gnm")
install.packages("gnm")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
class(model)
quote(model)
model == gnm
mf
formula
class(formula)
str(formula)
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
mf
formula3
devtools::test(filter="em")
mf
devtools::test(filter="em")
mf
nrow(mf)
nobs(mf)
nobs.table(mf)
nobs.table(mf)
devtools::test(filter="em")
mf
devtools::test(filter="em")
modelTerms
modelData
modelData
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
do.call(model, list(...))
fit
str(fit)
match(c("formula","data", "call", "terms"), names(fit), OL)
match(c("formula","data", "call", "terms"), names(fit))
names(fit)
fit[c(10,11)]
devtools::test(filter="em")
m
str(fit[m])
match(c("call", "terms", "data", "x", "y"), names(fit), 0L)
str(fit[c(10,11,0,0,0)])
devtools::test(filter="em")
m
mt[[l]]
class(mt[[l]])
dim(mt[[l]])
dim(c(1,2,3))
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
str(z)
z$call
str(z$call)
devtools::test(filter="em")
?model.matrix
devtools::test(filter="em")
devtools::test(filter="em")
model.matrix(mt$terms)
model.matrix(mt$terms, mt$data)
mt$data
data()
data
model.matrix(mt$model)
mt$model
devtools::test(filter="em")
model.matrix(mt$terms, mt$data)
mt4data
mt$data
str(mt)
model.matrix(mt$terms, mt$model)
model.frame(mt$terms)
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
model.response(mt$terms, mt$model)
model.response(mt$model)
devtools::test(filter="em")
z
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
call
cl
devtools::test(filter="em")
devtools::test(filter="em")
mt$terms
attr(mt$terms, ".Environment")
environment()
environment()$concomitant
environment()$latent
attr(mt$terms, ".Environment") <- environment()
mt$terms
model.matrix(mt$terms)
devtools::test(filter="em")
class(results3)
class(results4)
update.default
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
out.1
devtools::test(filter="em")
x
y
y
devtools::test(filter="em")
devtools::test(filter="em")
y
x
devtools::test(filter="em")
fit_fmm
out.2
fit_fmm
summary(fit_fmm)
refit(fit_fmm)
flexmix::refit(fit_fmm)
fit_fmm
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
get("binomial", mode="function")()
get("binomial", mode="function")()
devtools::test(filter="em")
devtools::test(filter="em")
object$linear.predictors
object$fitted.values
dbinom(y,size=y,prob=object$fitted.values)
dbinom(y,size=y,prob=object$fitted.values)
dbinom(y,size=rep(1,length(y)),prob=object$fitted.values)
devtools::test(filter="em")
devtools::test(filter="em")
lappy
lapply
devtools::test(filter="em")
usethis::use_test("multi.em.R")
devtools::test(filter="em")
devtools::test(filter="em")
args
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
fitted[[i]]
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
