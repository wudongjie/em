object$models[[1]]$weights
results$models[[1]]$weights
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
logLik(ans$sum.models[[1]])
print(ans$sum.models[[1]])
logLik(object$models[[1]])
sum(log(fit.den(object$models[[1]])))
sum(object$models[[1]]$weights*log(fit.den(object$models[[1]])))
sum(object$models[[2]]$weights*log(fit.den(object$models[[2]])))
devtools::test(filter="em")
?log
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
?AIC
AIC
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
aic(object$models[[1]])
AIC(object$models[[1]])
2*ans$ll
ans$npar
ans$coefficients
ans$npar <- length(ans$pi) + nrows(ans$coefficients) - 1
ans$npar <- length(ans$pi) + nrow(ans$coefficients) - 1
ans$npar
2*7-2*ans$ll
2*7+2*ans$ll
2*8+2*ans$ll
2*6+2*ans$ll
2*8-2*ans$ll
devtools::test(filter="em")
devtools::test(filter="em")
ans$sum.models[[1]]$df
ans$sum.models[[1]]$rank
object$models[[1]]$rank
object$models[[1]]$df.residual
?df
df(object$models[[1]])
str(object$models[[1]])
str(object$models)
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
ans$ll
ans$df
ll
devtools::test(filter="em")
length(models)
df.em(models[[1]])
devtools::test(filter="em")
logLik(object)
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
ll$logLik
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
attr(ll, "df")
attr(ans$ll, "df")
ans$ll
devtools::test(filter="em")
attr(ll,"df")
attr(ans$ll,"df")
ans$df
ans$ll
ans$ll[[2]]
ans$ll[2]
ans$ll[1]
str(ans$ll)
attr(ans$ll)
attr(ans$ll, "logLik")
attr(ans$ll, "nobs")
attr(ans$ll, "df")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
str(pd)
summary(pd)
print(pd)
?sum
devtools::test(filter="em")
matrix(unlist(compo), ncol=2)
compo[[1]]
compo[[2]]
object$pi
object$post_pr
fmm_fit
summary(fmm_fit)
summary(fmm_fit$mean)
summary(NPreg$yn)
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
summary(fit_glm)
fit_glm <- glm(yb~x, family=quasibinomial(), data=NPreg)
summary(fit_glm)
fit_glm <- glm(yb~x, family=binomial(), data=NPreg)
summary(fit_glm)
devtools::test(filter="em")
str(fmm_fit)
?dnorm
fitdistr(rgamma(100,shape=5, rate=0.1), dgamma, list(shape=1, rate=0.1))
MASS::fitdistr(rgamma(100,shape=5, rate=0.1), dgamma, list(shape=1, rate=0.1))
result11 <- MASS::fitdistr(rgamma(100,shape=5, rate=0.1), dgamma, list(shape=1, rate=0.1))
str(result11)
install.packages("fitdistrplus")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
nobs(tmp)
devtools::test(filter="em")
nobs(tmp)
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
fit.den(models[[i]])
devtools::test(filter="em")
den
devtools::test(filter="em")
post_pr
devtools::test(filter="em")
devtools::test(filter="em")
init_pr
post_pr
post_pr
do.call(models[[1]], pars)
View(post_pr)
is.vecot(pars$weights)
is.vector(pars$weights)
usethis::use_test("cem")
devtools::test(filter="cem")
devtools::test(filter="cem")
post_pr
init_pr
ll
devtools::test(filter="cem")
fitd2
str(fitd2$models)
fitd2$pi
fitd2$post_pr
devtools::test(filter="cem")
m2 <-   mixtools::normalmixEM(y)
m2
summary(m2)
fitd1
coef(fitd1)
devtools::test(filter="cem")
devtools::test(filter="cem")
devtools::test(filter="cem")
names_coef
ans$coefficients
devtools::test(filter="em")
devtools::test(filter="em")
str(coef(ans$sum.models[[1]]))
str(ans$sum.models[[1]]$coefficients)
ans$coefficients
devtools::test(filter="em")
devtools::test(filter="em")
str(coef(object$models[[i]]))
str(coef(ans$models[[i]]))
coef(ans$models[[1]])
summary(object$models[[1]])
str(summary(object$models[[1]]))
coef(ans$sum.models[[i]])
str(coef(ans$sum.models[[1]]))
ans$coefficients
names_coef
devtools::test(filter="em")
ans$coefficients[[1]]
devtools::test(filter="em")
devtools::test(filter="em")
ans$coefficients[[1]]
ans$coefficients
names_coef
object$obs
ans$df
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="gnm")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
summary(doubleUnidiff)
devtools::test(filter="em")
devtools::test(filter="em")
length(results)
model
str(model
)
length(models)
length(models)
str(models)
)
devtools::test(filter="em")
length(models)
post_pr
result[[1]]
models[[2]]
print(result[[2]])
print(result[[1]])
length(results)
object$family[1]$family
model.response(model.frame(object$formula, data=object$data))
object$terms
sessionInfo(gnm)
sessionInfo("gnm")
formula1 <- Freq ~ election:vote + election:class:religion +
Mult(Exp(election), religion:vote) + Mult(Exp(election), class:vote)
?model.frame
model.frame(formula1, gnm::cautres)
library(gnm)
model.frame(formula1, cautres)
devtools::test(filter="em")
model.frame(object$formula, data=object$data)
object$fitted.values
post_pr
devtools::test(filter="em")
dUnidiffl2
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
pi_matrix
fit.den(models[[1]])*pi_matrix[,i]
fit.den(models[[1]])*pi_matrix[,1]
postpr
length(results)
pi
fit.den(results[[1]])
post_pr
pi
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
terms(formula1)
model.frame(terms(formula1))
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
summary(udf2_1)
summary(udf2_2)
?dpoisson
?family
?family.glm
devtools::test(filter="em")
devtools::test(filter="em")
install.packages("fitdistrplus")
devtools::test(filter="em")
?binomial
?rank
devtools::test(filter="em")
?family
?substitute
?make.link()
?gnmterm
?gnm::gnmterm
?gnm::gnmTerms
update.packages("gnm")
package_version("gnm")
package_version(gnm)
devtools::test(filter="em")
model.frame(object$formula)
model.frame(object$formula, object$data)
formula
object$formula''
object$formula
devtools::test(filter="em")
model.frame(object$formula, object$data)
model.frame(gnmTerms(object$formula), object$data)
gnm::gnmTerms(object$formula)
model.response(object$model)
str(object$model)
devtools::test(filter="em")
devtools::test(filter="em")
udf2_3
summary(udf2_3)
?gnm.update
gnm.update
gnm::gnm.update
update.formula
update.default
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
call
args1
terms(object)
terms(object$models)
terms(object$models[[1]])
object$call$pars
devtools::test(filter="em")
match.call(expand.dots = FALSE)
match.call()
devtools::test(filter="em")
devtools::test(filter="em")
upf2_2
udf2_2
devtools::test(filter="em")
summary(udf2_2)
summary(udf2_1)
summary(udf2_2)
summary(udf2_3)
summary(udf2_4)
summary(udf1)
summary(udf2_4)
devtools::test(filter="em")
devtools::test(filter="em")
y
dbinom(y[,1], size=rowSums(y), prob=object$fitted.values)
dbinom(y, size=y, prob=object$fitted.values)
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
flexmix::flexmix(formula, data, k=2, model=FLXMRglm(family="binomial"))
flexmix::flexmix(formula, data, k=2, model=flexmix::FLXMRglm(family="binomial"))
flexmix::flexmix(formula, data, k=2, model=flexmix::FLXMRglm(formula=formula, family="binomial"))
flexmix::flexmix(formula, NPreg, k=2, model=flexmix::FLXMRglm(family="binomial"))
NPreg$ynb <- 1 - NPreg$yb
formula2 <- yb + ynb ~x+x2
flexmix::flexmix(formula2, NPreg, k=2, model=flexmix::FLXMRglm(family="binomial"))
formula2 <-  cbind(yb, 1-yb) ~x+x2
flexmix::flexmix(formula2, NPreg, k=2, model=flexmix::FLXMRglm(family="binomial"))
summary(flexmix::flexmix(formula2, NPreg, k=2, model=flexmix::FLXMRglm(family="binomial")))
print(summary(flexmix::flexmix(formula2, NPreg, k=2, model=flexmix::FLXMRglm(family="binomial"))))
fr1 <- flexmix::flexmix(formula2, NPreg, k=2, model=flexmix::FLXMRglm(family="binomial"))
summary(fr1)
refit(fr1)
flexmix::refit(fr1)
summary(fr1)
str(fr1)
?dbinom
?dbinom
devtools::test(filter="em")
object$family
object$family$linkfun()
object$family$linkfun
object$family$linkfun(den)
object$family$linkfun(1)
object$family$linkfun(0)
object$family$linkfun(1, log=T)
object$family$linkfun(1)
?dbinom
update.formula
?model.matrix
nrow(c(1,2))
?nnet::nnet
"formula" %in% c("formula", "else")
?nnet.default
devtools::test(filter="em")
devtools::test(filter="em")
fit_lm$model
devtools::test(filter="em")
devtools::test(filter="em")
model.matrix(formula., data)
devtools::test(filter="em")
model.matrix(formula, data)
model.matrix.default()
devtools::test(filter="em")
model.matrix(formula, data)
model.matrix.default()
devtools::test(filter="em")
nnet.default(x, y)
nnet(x, y)
nnet::nnet(x, y)
devtools::load_all()
devtools::test(filter="em")
nnet()
usethis::use_package("nnet")
devtools::test(filter="em")
nnet()
devtools::test(filter="em")
devtools::test(filter="em")
nnet::nnet(x, y size=0)
nnet::nnet(x, y size=0)
nnet::nnet(x,y, size=0=
nnet::nnet(x,y, size=0)
devtools::test(filter="em")
nnet::nnet.default(x, y, w, size=0)
nnet::nnet.default(x, y, w=w, size=0)
devtools::test(filter="em")
mask
r
p
nnet::nnet.default(x, y, w, mask = mask, size = 0,
skip = TRUE, softmax = TRUE, censored = FALSE,
rang = 0, trace=FALSE,...)
nnet::nnet.default(x, y, w, mask = mask, size = 0,
skip = TRUE, softmax = TRUE, censored = FALSE,
rang = 0, trace=FALSE)
kk <- nnet::nnet.default(x, y, w, mask = mask, size = 0,
skip = TRUE, softmax = TRUE, censored = FALSE,
rang = 0, trace=FALSE)
kk$fitted.values
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
object$concomitant
devtools::test(filter="em")
devtools::test(filter="em")
str(summary$results.con)
str(summary(results.con))
coef(results.con)
str(results.con)
devtools::test(filter="em")
mstep.concomitant.refit(concomitant, modelData, post_pr)
devtools::test(filter="em")
mstep.concomitant.refit(concomitant, modelData, post_pr)
devtools::test(filter="em")
mstep.concomitant.refit(concomitant, modelData, post_pr)
summary(mstep.concomitant.refit(concomitant, modelData, post_pr))
devtools::test(filter="em")
x$summary.concomitant
str(x$summary.concomitant)
?printCoefmat
devtools::test(filter="em")
coefs
coefs
str(coefs)
str(x$summary.concomitant)
nobs(x$summary.concomitant)
devtools::test(filter="em")
flatten(x$summary.concomitant$coefficients)
devtools::test(filter="em")
flatten(x$summary.concomitant$coefficients)
flatten(x$summary.concomitant$coefficients, by="row")
str(x$summary.concomitant$coefficients)
usethis::use_test("utils")
devtools::test(filter="utils")
devtools::test(filter="utils")
devtools::test(filter="utils")
flatten(coefMatrix, by="row")
devtools::test(filter="utils")
devtools::test(filter="utils")
devtools::test(filter="utils")
isclass(sample)
class(sample)
class(sample())
class(sample(1:100))
?kmeans
kmeans(matrix(sample(1:2,100,replace=T)))
kmeans(matrix(sample(1:2,100,replace=T)), centers=2)
summary(kmeans(matrix(sample(1:2,100,replace=T)), centers=2))
print(kmeans(matrix(sample(1:2,100,replace=T)), centers=2))
str(kmeans(matrix(sample(1:2,100,replace=T)), centers=2))
str(kmeans(matrix(sample(1:4,100,replace=T)), centers=2))
devtools::test(filter="em")
post_pr
str(post_pr)
devtools::test(filter="em")
match.args(init.method)
match.arg(init.method)
devtools::test(filter="em")
devtools::test(filter="em")
z
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
init.method
class(post_pr)
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
devtools::test(filter="em")
args
kmeans(data, centers=ncol(object), args)
kmeans(data, centers=ncol(object))
vdummy(kmeans(data, centers=ncol(object)))
is.null(list())
is.null(list()[[1]])
missing(list())
missing(...)
kmeans(data, centers=ncol(object))$cluster
vdummy(kmeans(data, centers=ncol(object))$cluster)
